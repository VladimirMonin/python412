DATA = [
    {
        "timestamp": [
            0.0,
            27.7
        ],
        "text": " Разберемся, как работает сетка Bootstrap. Сетка Bootstrap позволяет делать многие вещи достаточно гибко. Мы можем сразу заглянуть в Bootstrap примеры и, допустим, на примере вот этой истории посмотреть, что на с каких-то других размеров, эти блоки располагаются просто друг подружкой."
    },
    {
        "timestamp": [
            28.58,
            34.78
        ],
        "text": " И сделано это в данном случае просто за счет использования сетки Bootstrap, то есть уже готовых для нас классов."
    },
    {
        "timestamp": [
            35.12,
            40.24
        ],
        "text": " В этих примерах используется только Bootstrap стиле, ничего более дополнительного нет."
    },
    {
        "timestamp": [
            40.9,
            46.66
        ],
        "text": " И мы посмотрим, как вообще с этим работать, и потом разберем уже конкретно эту реализацию"
    },
    {
        "timestamp": [
            46.66,
            54.24
        ],
        "text": " посмотрим как она сделана и за счет чего начнем с того что у меня будет пустая страничка пока что"
    },
    {
        "timestamp": [
            54.24,
            60.4
        ],
        "text": " здесь у меня подключены стиле bootstrap и скрипты bootstrap которые на самом деле нам не понадобится"
    },
    {
        "timestamp": [
            60.4,
            66.18
        ],
        "text": " давайте даже отключим в этом уроке они нам не нужны у меня здесь просто есть че чуан в который пока"
    },
    {
        "timestamp": [
            66.18,
            73.26
        ],
        "text": " что располагается вот таким вот нехитрым образом и в документации официального сайта bootstrap мы"
    },
    {
        "timestamp": [
            73.26,
            88.88
        ],
        "text": " пойдем в раздел layout в layout есть три раздела overview grid и utilities и мы начнем с overview здесь базовое понятие это контейнеры и здесь у нас уже"
    },
    {
        "timestamp": [
            88.88,
            98.18
        ],
        "text": " знакомые нам размеры 5 размеров для экранов разных величин bootstrap и мы во-первых видим"
    },
    {
        "timestamp": [
            98.18,
            106.18
        ],
        "text": " сами эти размеры во вторых мы видим некий класс который называется контейнер и здесь он бывает опять же в разных вариантов"
    },
    {
        "timestamp": [
            106.18,
            119.08
        ],
        "text": " давайте начнем с применения обычного контейнера контейнер и поместим внутрь наш заголовок теперь у"
    },
    {
        "timestamp": [
            119.08,
            128.84
        ],
        "text": " нас заголовка появились отступы по краям давайте Давайте смотреть, почему так происходит. Вот наш контейнер. И видим, что у этого контейнера дополнительно появились маржины."
    },
    {
        "timestamp": [
            129.1,
            130.98
        ],
        "text": " Ну, во-первых, у него есть максимальная ширина."
    },
    {
        "timestamp": [
            131.96,
            135.1
        ],
        "text": " У него, соответственно, автоматически маржины, чтобы он выстроился по центру."
    },
    {
        "timestamp": [
            135.16,
            137.6
        ],
        "text": " Плюс есть еще небольшие паддинги по краям."
    },
    {
        "timestamp": [
            138.12,
            142.8
        ],
        "text": " Причем, в зависимости от размеров экрана, ширина контейнера будет отличаться."
    },
    {
        "timestamp": [
            143.16,
            149.62
        ],
        "text": " Соответственно, 720 пикселей для такого размера, 540 пикселей для такого размера 540 пикселей для такого размера ну и так далее"
    },
    {
        "timestamp": [
            150.66,
            152.66
        ],
        "text": " с контейнер нам сразу некие"
    },
    {
        "timestamp": [
            153.24,
            161.58
        ],
        "text": " ограничивает размеры при этом у нас есть табличка который нам говорит что на самых маленьких устройствах у нас ширина контейнера это 100 процентов"
    },
    {
        "timestamp": [
            161.88,
            165.6
        ],
        "text": " начиная с таких размеров такая такая ширина, ну и так далее."
    },
    {
        "timestamp": [
            175.12,
            176.2
        ],
        "text": " При этом мы можем конкретизировать, что если нам нужна 100% ширина не только на самых маленьких, но и на последующих устройствах, мы можем добавить некий префикс."
    },
    {
        "timestamp": [
            178.78,
            182.98
        ],
        "text": " С префиксом sm ничего вообще не поменяется. То есть мы видим точно такой же контейнер, как и в значении по умолчанию."
    },
    {
        "timestamp": [
            186.84,
            195.0
        ],
        "text": " же контейнер как и в значении по умолчанию со значением контейнер md у нас сто процентов ширина будет на двух размерах на последующих уже будет внедряться ну и так далее обычно наиболее популярный"
    },
    {
        "timestamp": [
            195.0,
            205.4
        ],
        "text": " по крайней мере вариант это использование просто контейнера и так называемого резинового контейнера когда он при любых размерах 100%. Давайте тоже его попробуем."
    },
    {
        "timestamp": [
            208.54,
            209.82
        ],
        "text": " Контейнер тире плевит."
    },
    {
        "timestamp": [
            213.06,
            214.5
        ],
        "text": " У нас автоматом меньше места по бокам освободилось."
    },
    {
        "timestamp": [
            219.48,
            219.54
        ],
        "text": " То есть контейнер стал резиновым, у него теперь нет фиксированной ширины,"
    },
    {
        "timestamp": [
            223.54,
            224.32
        ],
        "text": " но у него по-прежнему есть паддинги, за счет которых текст немножко отступает."
    },
    {
        "timestamp": [
            229.18,
            232.9
        ],
        "text": " Вне зависимости от размеров, у нас все время размер контейнера 100%. В зависимости от задач можно использовать либо тот, либо другой вариант."
    },
    {
        "timestamp": [
            233.64,
            238.84
        ],
        "text": " В данном случае нужно иметь в виду то, что мы контейнеры в контейнеры можем сколько угодно раз вкладывать."
    },
    {
        "timestamp": [
            238.84,
            244.22
        ],
        "text": " И, допустим, на верхнем уровне, когда нам нужно сетку организовать для каких-то элементов,"
    },
    {
        "timestamp": [
            244.58,
            246.3
        ],
        "text": " где-то нам пригодится как раз"
    },
    {
        "timestamp": [
            246.3,
            251.74
        ],
        "text": " фиксированный размер контейнера, а уже для вложенных элементов нам может понадобиться резиновый вариант."
    },
    {
        "timestamp": [
            252.86,
            260.88
        ],
        "text": " Пока что мы будем использовать обычный контейнер. На этой странице что-то мега интересного пока что"
    },
    {
        "timestamp": [
            260.88,
            268.52
        ],
        "text": " для нас нет, мы сразу пойдем с вами в Gridит в раздел сетки и посмотрим что сетка"
    },
    {
        "timestamp": [
            268.52,
            273.74
        ],
        "text": " у нас начинается с того что мы используем дополнительно к контейнеру еще какой-то набор"
    },
    {
        "timestamp": [
            273.74,
            281.48
        ],
        "text": " классов здесь у нас предлагается класс row и вложенные в него блочки данном случае у нас сразу"
    },
    {
        "timestamp": [
            281.48,
            291.26
        ],
        "text": " есть превью и мы видим как они выглядят нас три одинаковых по ширине блочка, и они каким-то образом позиционируются."
    },
    {
        "timestamp": [
            291.32,
            294.34
        ],
        "text": " Мы сейчас все это дело посмотрим, но нам важно, что здесь появился класс row."
    },
    {
        "timestamp": [
            294.46,
            295.34
        ],
        "text": " Давайте начнем с него."
    },
    {
        "timestamp": [
            295.9,
            298.2
        ],
        "text": " У нас пока что такого класса нет, мы его добавляем."
    },
    {
        "timestamp": [
            325.56,
            325.88
        ],
        "text": " И у нас уже кое-что поменялось. Сейчас, если мы видим наш контейнер, мы видим, что у него есть паддинги, но эти паддинги внезапно нашим текстом игнорируются. Делается за счет того, что у класса row используются отрицательные маржины. То есть контейнер паддинг добавил, маржин эти же паддинги у нас взял и ликвидировал за счет отрицательные маржины. То есть контейнер padding добавил,"
    },
    {
        "timestamp": [
            329.9,
            330.68
        ],
        "text": " маржин эти же padding у нас взял и ликвидировал за счет отрицательных маржинов."
    },
    {
        "timestamp": [
            332.94,
            333.48
        ],
        "text": " По сути, сделано для того, чтобы мы могли по сетке,"
    },
    {
        "timestamp": [
            337.42,
            339.9
        ],
        "text": " ровно по вот этому контейнеру, без всяких отступов, могли бы выстраивать какие-то элементы."
    },
    {
        "timestamp": [
            341.92,
            348.46
        ],
        "text": " И, собственно, все, что мы выстраиваем внутри, вкладывается уже внутрь row. Роу нужен только"
    },
    {
        "timestamp": [
            348.46,
            355.06
        ],
        "text": " чтобы убрать эти дополнительные элементы. У меня в моем документе дополнительно скопированы из"
    },
    {
        "timestamp": [
            355.06,
            360.82
        ],
        "text": " bootstrap небольшие стили для того чтобы те примеры которые мы будем смотреть чтобы они"
    },
    {
        "timestamp": [
            360.82,
            364.84
        ],
        "text": " выглядели вот так же. Смотреть эти примеры на официальном сайте не всегда удобно потому что здесь"
    },
    {
        "timestamp": [
            364.84,
            368.88
        ],
        "text": " есть дополнительные элементы. Вот я буду копировать отсюда примеры и мы будем"
    },
    {
        "timestamp": [
            368.88,
            373.32
        ],
        "text": " смотреть они будут выглядеть примерно так же давайте скопируем все вот эту составляющую и"
    },
    {
        "timestamp": [
            373.32,
            389.22
        ],
        "text": " посмотрим а на то как она будет у нас выглядеть мы можем смело стереть и давайте смотреть у нас три блока выстроенных в одну колоночку при этом начиная с определенного"
    },
    {
        "timestamp": [
            389.22,
            394.22
        ],
        "text": " размера они выстраиваются в одну почему так происходит почему на всех остальных размеров они"
    },
    {
        "timestamp": [
            394.22,
            402.32
        ],
        "text": " у нас одинакового размера на самом большом соответственно маленький размер контейнер у"
    },
    {
        "timestamp": [
            402.32,
            405.34
        ],
        "text": " нас сто процентов для самого маленького соответственно на всех размер. Контейнер у нас 100% для самого маленького."
    },
    {
        "timestamp": [
            408.36,
            408.54
        ],
        "text": " Соответственно, на всех других размерах контейнер имеет фиксированную ширину."
    },
    {
        "timestamp": [
            410.08,
            411.56
        ],
        "text": " Поэтому оно, в общем-то, так и выглядит."
    },
    {
        "timestamp": [
            417.42,
            419.08
        ],
        "text": " И мы видим, что у всех вот этих элементов прописан класс call.sm."
    },
    {
        "timestamp": [
            420.38,
            420.56
        ],
        "text": " sm – это некий префикс."
    },
    {
        "timestamp": [
            422.4,
            422.66
        ],
        "text": " Мы, в принципе, уже видели эти префиксы."
    },
    {
        "timestamp": [
            425.7,
            434.76
        ],
        "text": " В частности, когда только что рассматривали вот эту всю историю у нас был префикс sm как смол для самых маленьких экранах md для точнее sm для вот этого размера на"
    },
    {
        "timestamp": [
            434.76,
            447.8
        ],
        "text": " sm это у нас xs extra small xs sm соответственно начиная от этого размера md префикс начиная от этого размера lg и"
    },
    {
        "timestamp": [
            447.8,
            455.48
        ],
        "text": " excel вот это префиксы они добавляются к самым разным классом то есть где нам предлагает это"
    },
    {
        "timestamp": [
            455.48,
            471.68
        ],
        "text": " документация и в данном случае мы используем их с классом call call это некая колонка в данном случае колонка по с м см это у нас получается от 500 576 и начиная"
    },
    {
        "timestamp": [
            471.68,
            480.1
        ],
        "text": " с размера 576 у нас автоматические размеры применим принимают вот эти три блока и на если мы возьмем"
    },
    {
        "timestamp": [
            480.1,
            487.08
        ],
        "text": " сетку то сетку бутстрап изначально делится на 12 колонок то есть вот этот три содержимое так как"
    },
    {
        "timestamp": [
            487.08,
            491.82
        ],
        "text": " они у нас сейчас автоматически заняли положение по сути каждый из них занимает сама по себе четыре"
    },
    {
        "timestamp": [
            491.82,
            499.68
        ],
        "text": " колонки четыре колонки 1 4 колонки 2 4 колонки 3 в сумме мы получаем 12 в данном случае мы никак не"
    },
    {
        "timestamp": [
            499.68,
            504.12
        ],
        "text": " конкретизировали сколько каждый из этих колонок будет занимать место мы можем это сделать на"
    },
    {
        "timestamp": [
            504.12,
            507.76
        ],
        "text": " дальнейшем этим это сегодня посмотрим а сейчас никак не сделано не"
    },
    {
        "timestamp": [
            507.98,
            512.6
        ],
        "text": " конкретизировано поэтому они автоматически занимают у нас одинаковое одинаковое положение все три"
    },
    {
        "timestamp": [
            513.68,
            522.04
        ],
        "text": " при этом они начинают имеют такое поведение начиная с размера с н ниже этого размера они автоматом получают ширину 100 процентов"
    },
    {
        "timestamp": [
            524.24,
            530.14
        ],
        "text": " такая хитрость работы с колонками идем дальше собственно вот"
    },
    {
        "timestamp": [
            530.14,
            536.68
        ],
        "text": " grid options какие у нас опции есть да мы можем использовать просто колонку причем если мы"
    },
    {
        "timestamp": [
            536.68,
            547.08
        ],
        "text": " используем без префиксом у нас она будет автоматически выстраиваться но мы можем использовать префикс использовать цифры максимум колонок у нас 12 мы видим эту"
    },
    {
        "timestamp": [
            547.08,
            555.06
        ],
        "text": " настройку в грит общинсах а дальше мы смотрим что у нас есть возможность вложенности и мы также можем"
    },
    {
        "timestamp": [
            555.06,
            562.2
        ],
        "text": " управлять порядком здесь большая обширная документация все это описано мы не будем детально"
    },
    {
        "timestamp": [
            562.2,
            565.76
        ],
        "text": " все рассматривать но так иначе что-то посмотрим и для работы с"
    },
    {
        "timestamp": [
            565.76,
            571.44
        ],
        "text": " extra small мы используем просто класс колл с возможностью добавить какую-то цифру для работы"
    },
    {
        "timestamp": [
            571.44,
            586.72
        ],
        "text": " с small call sm с medium call им дим с large call lg с extra large call excel это именно то что касается выстраивания колонок причем мы сразу получаем адаптив на в данном"
    },
    {
        "timestamp": [
            586.72,
            595.42
        ],
        "text": " случае 3 и в одну колонку пока что не все одинаковые сейчас мы будем более подробно это копать дальше"
    },
    {
        "timestamp": [
            595.42,
            602.68
        ],
        "text": " нам предлагается еще один пример с автоматическим выравниванием здесь просто у нас идут колы колод"
    },
    {
        "timestamp": [
            602.68,
            606.84
        ],
        "text": " значит прямо для самого маленького размера уже начиная с самого маленького"
    },
    {
        "timestamp": [
            606.84,
            612.36
        ],
        "text": " размера эти правила и будут действовать и то есть даже если самый маленький мы возьмем ничего не нас"
    },
    {
        "timestamp": [
            612.36,
            619.86
        ],
        "text": " не поменяется здесь на любом размере у нас будет вот такая структура почему потому что нас два раза"
    },
    {
        "timestamp": [
            619.86,
            628.14
        ],
        "text": " использованы ряд во первом ряду у нас просто две колонки лежит и они занимают авто в автоматическом режиме так"
    },
    {
        "timestamp": [
            628.14,
            636.02
        ],
        "text": " как их две грубо говоря 2 12 то есть половина одну шестую в следующем варианте у нас лежит"
    },
    {
        "timestamp": [
            636.02,
            650.02
        ],
        "text": " точно также три колонки без каких-либо дополнительных цифр поэтому они благополучно равномерно по 12 колонкам распределились заняв каждое по 4 колонки без"
    },
    {
        "timestamp": [
            650.02,
            658.3
        ],
        "text": " конкретизирования поэтому выглядит не очень удачно но для понимания возможно будет полезно если нам"
    },
    {
        "timestamp": [
            658.3,
            663.72
        ],
        "text": " нужно конкретизировать что мы используем одинаковые размеры колонок не хотим их никак перестраивать нам"
    },
    {
        "timestamp": [
            663.72,
            687.28
        ],
        "text": " нужно несколько таких строк сделать мы не хотим использовать несколько рядов, несколько раз row использовать. Есть специальный разделитель. Вот такой вот класс W100. По сути, нам сделают вот такой разделитель. Не так часто может пригодиться, но в данном случае мы просто посмотрели, что оно есть. Даже не будем смотреть более конкретный пример. и вот у нас начинается настройки того как у"
    },
    {
        "timestamp": [
            687.28,
            702.74
        ],
        "text": " нас ширина в одной колонке будет выстраиваться скопируем и давайте смотреть у нас есть какой-то"
    },
    {
        "timestamp": [
            702.74,
            729.12
        ],
        "text": " блок который шире остальных здесь блок который шире остальных. Здесь блок, который шире остальных. Почему так происходит? Собственно, первые три — это отдельный ряд. В нем есть два элемента с значением просто call. Значит, они в автоматическом режиме занимаются для себя пространство. И один имеет конкретику — call-6. Так как это просто call, без дополнительных суффиксов типа sm, md, то у нас начиная с самого маленького размера это правило будет работать."
    },
    {
        "timestamp": [
            730.14,
            734.58
        ],
        "text": " Call 6 означает, что именно эта ячейка займет 6 из 12."
    },
    {
        "timestamp": [
            735.32,
            744.2
        ],
        "text": " У нас остается из 12 еще только 6 колонок, поэтому оставшиеся 2 колонки здесь, они равномерно эту пространцию займут, то бишь по 3 из 12."
    },
    {
        "timestamp": [
            755.32,
            791.28
        ],
        "text": " Это больше. Она могла бы быть другим числом, допустим она могла быть call 4ки. Это невозможно. А для автоматического режимаического режима да но может такую опцию поиграться мы"
    },
    {
        "timestamp": [
            791.28,
            795.42
        ],
        "text": " начали работать размерами обращаем на это внимание сейчас они будут использоваться все"
    },
    {
        "timestamp": [
            795.42,
            809.3
        ],
        "text": " более конкретно и следующий пример более интересный У нас здесь получается, что используется по несколько классов в некоторых элементах."
    },
    {
        "timestamp": [
            809.36,
            810.52
        ],
        "text": " Давайте тоже все скопируем."
    },
    {
        "timestamp": [
            816.36,
            821.34
        ],
        "text": " У нас, во-первых, у row дополнительный класс используется для того, чтобы все выровнять по центру."
    },
    {
        "timestamp": [
            822.0,
            825.2
        ],
        "text": " Дальше у нас у некоторых блоков используется одновременно и call,"
    },
    {
        "timestamp": [
            825.5,
            828.38
        ],
        "text": " просто call без каких-либо конкретик, и call LG 2."
    },
    {
        "timestamp": [
            829.08,
            833.88
        ],
        "text": " Это означает, что на маленьком размере экрана, вплоть до размера LG,"
    },
    {
        "timestamp": [
            834.26,
            838.82
        ],
        "text": " он будет в автоматическом режиме занимать оставшийся размер."
    },
    {
        "timestamp": [
            841.32,
            865.16
        ],
        "text": " Начиная с большого экрана, он займет ровно 2 из 12 колонок. Следующий более интересный вариант. У него написано call.md.auto. Это значит, что начиная с размера MD, он будет в зависимости от того контента, который в нем внутри есть, он будет занимать больше либо меньше пространства. Соответственноственно в размере sm и в самом маленьком"
    },
    {
        "timestamp": [
            865.16,
            873.8
        ],
        "text": " размере он будет аналогом просто простого call начиная с этого размера он будет подстраиваться"
    },
    {
        "timestamp": [
            873.8,
            880.04
        ],
        "text": " под содержимое мы посмотрим сейчас на практике ну и соответственно 3 класс 3 колонка у нас копирует"
    },
    {
        "timestamp": [
            880.04,
            887.92
        ],
        "text": " первым тоже не просто call и call lg2 второй ряд здесь немножко отличается история здесь просто"
    },
    {
        "timestamp": [
            887.92,
            896.2
        ],
        "text": " фиксировано call то есть все что осталось занимает опять же автоматический вариант и повторение того"
    },
    {
        "timestamp": [
            896.2,
            909.9
        ],
        "text": " что у нас было до этого сохраним и посмотрим как работает самый маленький размер даже не самый маленький это 2 это уже размер sm маленький будет такой же у"
    },
    {
        "timestamp": [
            909.9,
            917.34
        ],
        "text": " нас все выстраивается друг подружкой почему только начиная с размера md у нас уже идет"
    },
    {
        "timestamp": [
            917.34,
            926.54
        ],
        "text": " конкретика до размера md у нас они все одинаковые при этом вот эти классы которые у нас идут call md auto опять же до размеры мди у них"
    },
    {
        "timestamp": [
            926.54,
            933.02
        ],
        "text": " ничего не включается специфического а до этого размера не ведут себя как обычные блоки а так"
    },
    {
        "timestamp": [
            933.02,
            938.38
        ],
        "text": " как это обычный блок он занимает всю ширину и здесь уже не важно что здесь здесь данном случае"
    },
    {
        "timestamp": [
            938.38,
            947.26
        ],
        "text": " нас занимает доступное пространство если бы у нас здесь был бы свой кол то они бы расположились три в ряд но так как здесь"
    },
    {
        "timestamp": [
            947.26,
            952.66
        ],
        "text": " нету своего кола то он ведет себя начиная до размера md он ведет себя просто как обычный блок"
    },
    {
        "timestamp": [
            952.66,
            966.66
        ],
        "text": " занимает все возможное пространство размеры с колом они благополучно подстраиваются под весь ряд то же То же самое в размере выше. Доходим до раздела MD и смотрим."
    },
    {
        "timestamp": [
            968.42,
            970.0
        ],
        "text": " Давайте первый. Откроем ряд."
    },
    {
        "timestamp": [
            973.04,
            974.08
        ],
        "text": " До LG мы еще не дошли."
    },
    {
        "timestamp": [
            974.18,
            975.82
        ],
        "text": " Мы можем не смотреть на вот эти два класса."
    },
    {
        "timestamp": [
            975.82,
            979.7
        ],
        "text": " По сути, боковые у нас сейчас занимают доступное пространство."
    },
    {
        "timestamp": [
            980.56,
            982.54
        ],
        "text": " Этот у нас занимает по контенту."
    },
    {
        "timestamp": [
            982.7,
            984.92
        ],
        "text": " Контент скопируем и вставим несколько раз."
    },
    {
        "timestamp": [
            985.64,
            991.22
        ],
        "text": " Контент стало больше, он расширился, соседние элементы занимают оставшееся пространство."
    },
    {
        "timestamp": [
            992.8,
            995.42
        ],
        "text": " Здесь, конечно, можно с этим доэкспериментироваться,"
    },
    {
        "timestamp": [
            995.68,
            998.96
        ],
        "text": " вплоть до того, что уже там некуда будет влезать."
    },
    {
        "timestamp": [
            1000.54,
            1002.52
        ],
        "text": " И не очень корректное поведение."
    },
    {
        "timestamp": [
            1003.52,
            1006.04
        ],
        "text": " В данном случае вот этот блок у нас стал очень маленьким."
    },
    {
        "timestamp": [
            1006.38,
            1008.82
        ],
        "text": " Этому не хватило места, он перенесся на следующую строчку."
    },
    {
        "timestamp": [
            1009.94,
            1016.56
        ],
        "text": " Ну, спорное поведение, но, так или иначе, этот класс сделал его доступным."
    },
    {
        "timestamp": [
            1016.76,
            1020.58
        ],
        "text": " И наш следующий блок, соответственно, здесь похожая история."
    },
    {
        "timestamp": [
            1021.28,
            1029.56
        ],
        "text": " Умновим страницу и пойдем до размера л джи нас заработал для размера л джи конкретика что наши"
    },
    {
        "timestamp": [
            1029.56,
            1034.76
        ],
        "text": " крайние колоночки теперь занимают строго два элемента и теперь если я даже буду увеличивать"
    },
    {
        "timestamp": [
            1034.76,
            1060.72
        ],
        "text": " размер текста он но максимум что сделает он займет всю ширину при этом вот эти блоки у нас останутся прежних размеров. Этот у нас на этот раз не растянулся по размеру. Call LG он стабильно занимает по 2. Вообще режим авто такой спорный. Просто есть возможность. Я на практике ни разу его не использовал."
    },
    {
        "timestamp": [
            1066.78,
            1072.12
        ],
        "text": " не использовал и другой наш вариант а вот этот пример вне зависимости от размеров он у нас всегда занимает доступное пространство этот у нас также работает по содержимому содержимого мало"
    },
    {
        "timestamp": [
            1072.12,
            1078.06
        ],
        "text": " поэтому он сейчас занимает немного места этот на размере lg занял двоечку раньше они у нас были"
    },
    {
        "timestamp": [
            1078.06,
            1085.96
        ],
        "text": " крайне одинаковые но на размере lg вступила конкретика то начиная с этого размера этот блок будет ровно две колонки"
    },
    {
        "timestamp": [
            1085.96,
            1089.72
        ],
        "text": " этот по содержимому это автоматически все остальное"
    },
    {
        "timestamp": [
            1089.72,
            1093.06
        ],
        "text": " на дальше мы сталкиваемся с собой больше конкретики"
    },
    {
        "timestamp": [
            1093.06,
            1097.22
        ],
        "text": " у нас идет два примера мы не будем сейчас их вставлять смотреть более подробно"
    },
    {
        "timestamp": [
            1097.22,
            1099.76
        ],
        "text": " нас а идет контейнер"
    },
    {
        "timestamp": [
            1099.76,
            1103.66
        ],
        "text": " и первый ряд говорит что у него четыре блока"
    },
    {
        "timestamp": [
            1103.66,
            1107.44
        ],
        "text": " и на всех размерах они будут 4 блока."
    },
    {
        "timestamp": [
            1108.82,
            1110.54
        ],
        "text": " Дальше мы смотрим второй ряд."
    },
    {
        "timestamp": [
            1111.7,
            1115.52
        ],
        "text": " Опять же, начиная с самых маленьких размеров, то есть, опять же, без конкретики, на всех размерах."
    },
    {
        "timestamp": [
            1115.96,
            1120.94
        ],
        "text": " Первый будет занимать 8 из 12 ячеек, второй будет занимать 4 из 12 ячеек."
    },
    {
        "timestamp": [
            1122.02,
            1123.06
        ],
        "text": " За счет цифр."
    },
    {
        "timestamp": [
            1131.36,
            1140.08
        ],
        "text": " 12 ячейок за счет цифр. Ну а далее мы можем с этим работать более конкретизированно. Здесь у нас идет конкретик call sm8, call sm4. Скопируем этот пример. sm это уже некий префикс. Когда мы используем"
    },
    {
        "timestamp": [
            1140.08,
            1147.02
        ],
        "text": " префикс, точнее суффикс, скорее, либо postfix, то мы уже конкретизируем размер sm значит начиная с"
    },
    {
        "timestamp": [
            1147.02,
            1153.88
        ],
        "text": " размера small все что до него мы предполагаем что у нас будет вести себя как обычный блок значит он"
    },
    {
        "timestamp": [
            1153.88,
            1163.1
        ],
        "text": " будет занимать все полностью тесно вот у нас по 100 процентов каждая ячейка занимает мы предполагаем"
    },
    {
        "timestamp": [
            1163.1,
            1168.06
        ],
        "text": " что 8 и 4 должно быть соответствия вот у нас начинается размеры с м и мы видим что"
    },
    {
        "timestamp": [
            1168.06,
            1176.86
        ],
        "text": " действительно соотношение примерно так оно и есть дальнейших конкретик у нас нету а могли бы быть и у"
    },
    {
        "timestamp": [
            1176.86,
            1192.8
        ],
        "text": " нас на любых размерах есть это соответствие что мы могли бы сделать могли Мы могли бы сказать «Окей». Но начиная с размера MD, это будет по 6 колонок и у той, и у другой."
    },
    {
        "timestamp": [
            1193.22,
            1197.96
        ],
        "text": " Вот так вот конкретизируем, что мы хотим, чтобы они были одинаковыми на размере,"
    },
    {
        "timestamp": [
            1198.06,
            1204.64
        ],
        "text": " начиная с 768 пикселей, а до этого они были бы такого размера."
    },
    {
        "timestamp": [
            1204.76,
            1206.08
        ],
        "text": " И теперь у нас что получается?"
    },
    {
        "timestamp": [
            1206.64,
            1208.32
        ],
        "text": " Мы повесили сюда два класса."
    },
    {
        "timestamp": [
            1209.34,
            1216.86
        ],
        "text": " Для самого маленького размера у нас нет никакого класса, никакого префикса, суффикса точнее, и никакой конкретики они занимают по 100%."
    },
    {
        "timestamp": [
            1216.86,
            1222.52
        ],
        "text": " Начиная с размера, который у нас означает SM, у нас говорит 8,4."
    },
    {
        "timestamp": [
            1222.78,
            1230.38
        ],
        "text": " Для размера SM 8,4 для размера см 8,4 потом мы добавили новую конкретику с размера md будь"
    },
    {
        "timestamp": [
            1230.38,
            1237.82
        ],
        "text": " пожалуйста по 6 колонок каждая доходим до размера md они стали одинаковыми можем развить эту историю"
    },
    {
        "timestamp": [
            1237.82,
            1248.04
        ],
        "text": " сказать что окей а теперь начиная с размера lg давай наоборот. Ты будешь 4 пикселя, точнее не пиксель, а колонки."
    },
    {
        "timestamp": [
            1250.04,
            1251.3
        ],
        "text": " А ты будешь 8."
    },
    {
        "timestamp": [
            1253.0,
            1258.54
        ],
        "text": " Пример наигранный я понимаю, но нам важно понять саму суть, как это может использоваться."
    },
    {
        "timestamp": [
            1259.38,
            1260.0
        ],
        "text": " Снова смотрим."
    },
    {
        "timestamp": [
            1260.08,
            1260.78
        ],
        "text": " Маленький размер."
    },
    {
        "timestamp": [
            1264.02,
            1266.16
        ],
        "text": " SM размер. 8,4."
    },
    {
        "timestamp": [
            1267.52,
            1269.34
        ],
        "text": " Медиум размер, одинаковые."
    },
    {
        "timestamp": [
            1269.84,
            1272.66
        ],
        "text": " Большой размер, это стало 4, это стало 8."
    },
    {
        "timestamp": [
            1275.7,
            1278.8
        ],
        "text": " Пример, который идет в второй колонке, здесь идет без цифр,"
    },
    {
        "timestamp": [
            1279.12,
            1281.4
        ],
        "text": " поэтому начиная с размера SM они все одинаковые."
    },
    {
        "timestamp": [
            1282.96,
            1285.5
        ],
        "text": " До размера SM они у нас были просто друг подружкой."
    },
    {
        "timestamp": [
            1286.92,
            1288.16
        ],
        "text": " Вели себя как обычные блоки."
    },
    {
        "timestamp": [
            1289.06,
            1292.4
        ],
        "text": " Ну и следующий пример, он нам как раз иллюстрирует то,"
    },
    {
        "timestamp": [
            1292.44,
            1293.44
        ],
        "text": " что мы только что смотрели."
    },
    {
        "timestamp": [
            1294.74,
            1297.62
        ],
        "text": " Он говорит, что окей, вот у нас ряд один, самый первый."
    },
    {
        "timestamp": [
            1298.24,
            1300.0
        ],
        "text": " У нас есть конкретика для медиума."
    },
    {
        "timestamp": [
            1301.68,
            1304.26
        ],
        "text": " При этом для медиума 8,4."
    },
    {
        "timestamp": [
            1309.96,
            1316.02
        ],
        "text": " при этом для медиума 8,4 а для самого маленького размера соответственно у этого нету никаких настроек начнем за 100 процентов а этот займет половину на самом маленьком экране и на sm тоже"
    },
    {
        "timestamp": [
            1316.02,
            1345.82
        ],
        "text": " потому что для sm нет конкретики для этого блока следующий вариант для всех маленьких ровно по половинке, начиная с MD, все будут занимать по 4 колонки. То есть выстроится 3 в ряд. Благополучно. Давайте тоже поэкспериментируем с этим. И сделаем здесь не 3, а 6 таких колонок."
    },
    {
        "timestamp": [
            1347.38,
            1350.3
        ],
        "text": " Вот это, наверное, даже можем удалить."
    },
    {
        "timestamp": [
            1352.24,
            1354.66
        ],
        "text": " И тоже не нужно."
    },
    {
        "timestamp": [
            1356.12,
            1357.64
        ],
        "text": " И что мы получаем?"
    },
    {
        "timestamp": [
            1362.48,
            1369.76
        ],
        "text": " У нас получается, что у нас, несмотря на то, что мы в один row все засунули у нас она работает по размерам то есть от самых"
    },
    {
        "timestamp": [
            1369.76,
            1379.08
        ],
        "text": " маленьких до размера md то есть это диапазон 2 ячейки xs и sm у нас они занимают по половинке и"
    },
    {
        "timestamp": [
            1379.08,
            1384.96
        ],
        "text": " соответственно все что не влазит то у нас 6 колонок 6 колонок 12 закончилось идет просто"
    },
    {
        "timestamp": [
            1384.96,
            1386.36
        ],
        "text": " переезд на следующую строку следующие 6 колон закончилось, идет просто переезд на следующую строку."
    },
    {
        "timestamp": [
            1386.78,
            1390.12
        ],
        "text": " Следующая 6 колонок, 6 колонок, переезд на следующую строку и так далее."
    },
    {
        "timestamp": [
            1390.88,
            1397.58
        ],
        "text": " Доходим до размера MD, 768 пикселей, и видим, что окей, теперь каждая должна у нас быть по 4 колонки."
    },
    {
        "timestamp": [
            1397.74,
            1401.88
        ],
        "text": " 4, 4, 4, 12, место закончилось, они начались со следующей колонки."
    },
    {
        "timestamp": [
            1402.3,
            1408.22
        ],
        "text": " Таким образом, они благополучно переезжают и формируют нам нужную сетку."
    },
    {
        "timestamp": [
            1409.0,
            1411.9
        ],
        "text": " В данном случае использовано два размера."
    },
    {
        "timestamp": [
            1412.38,
            1415.2
        ],
        "text": " Мы можем использовать по необходимости любое количество размеров."
    },
    {
        "timestamp": [
            1415.56,
            1418.42
        ],
        "text": " И так как это Mobile First, мы идем от меньшего к большему."
    },
    {
        "timestamp": [
            1418.76,
            1421.24
        ],
        "text": " Если у нас нет конкретики на все последующие размеры,"
    },
    {
        "timestamp": [
            1421.28,
            1424.72
        ],
        "text": " у нас есть MD, но нет ничего дальше, нет ни NLG и так далее,"
    },
    {
        "timestamp": [
            1425.78,
            1428.88
        ],
        "text": " значит, вот это свойство будет справедливо для всего того, что больше."
    },
    {
        "timestamp": [
            1430.3,
            1432.08
        ],
        "text": " Если мы не переназначили."
    },
    {
        "timestamp": [
            1434.86,
            1436.88
        ],
        "text": " Отдельно здесь можно посмотреть раздел Gatters."
    },
    {
        "timestamp": [
            1437.06,
            1444.8
        ],
        "text": " Он, по сути, работает как возможность добавить отступы на контейнеры, на RAW и так далее."
    },
    {
        "timestamp": [
            1445.12,
            1447.1
        ],
        "text": " Но эту тему мы смотрели с вами в прошлый раз."
    },
    {
        "timestamp": [
            1447.22,
            1448.32
        ],
        "text": " То есть здесь, по сути, что есть."
    },
    {
        "timestamp": [
            1448.48,
            1455.74
        ],
        "text": " Здесь на размере LG добавляются паддинги боковые по оси X и большого размера."
    },
    {
        "timestamp": [
            1455.88,
            1460.52
        ],
        "text": " Соответственно, для рядов добавляются маржины, тоже большие."
    },
    {
        "timestamp": [
            1460.52,
            1463.64
        ],
        "text": " И они отрицательные с минус 5."
    },
    {
        "timestamp": [
            1463.96,
            1469.72
        ],
        "text": " То есть одно нивелирует другое вот и какие-то дополнительные"
    },
    {
        "timestamp": [
            1469.72,
            1476.34
        ],
        "text": " отступы появляются еще одна возможность конкретизировать сколько колонок будет в ряду и несмотря на то что"
    },
    {
        "timestamp": [
            1476.34,
            1480.82
        ],
        "text": " на здесь просто колы без каких-либо разрывов получается что они выстраиваются в именно в то"
    },
    {
        "timestamp": [
            1480.82,
            1485.42
        ],
        "text": " количество колонок которые здесь указано же, такая достаточно специфическая история."
    },
    {
        "timestamp": [
            1487.82,
            1488.56
        ],
        "text": " Можно посмотреть примеры, как оно здесь работает."
    },
    {
        "timestamp": [
            1494.42,
            1495.38
        ],
        "text": " Мы помним, что наша четвертая версия Bootstrap работает на флексах."
    },
    {
        "timestamp": [
            1498.52,
            1499.14
        ],
        "text": " И, зная флексы, соответственно, здесь можно много чего удобного делать."
    },
    {
        "timestamp": [
            1503.3,
            1503.52
        ],
        "text": " И у нас есть специальные классы, которые позволяют выстраивать элементы."
    },
    {
        "timestamp": [
            1507.48,
            1513.86
        ],
        "text": " Соответственно, по вертикали мы можем их принудительно говорить что они у нас сверху по центру либо снизу просто за счет классов align"
    },
    {
        "timestamp": [
            1513.86,
            1526.24
        ],
        "text": " item start центр либо end мы можем их вот так вот выстраивать опять же за счет классов align-self с конкретным значением, ну и так далее."
    },
    {
        "timestamp": [
            1526.36,
            1531.04
        ],
        "text": " Примеры, опять же, если это будет актуально, рекомендую самостоятельно изучить."
    },
    {
        "timestamp": [
            1532.16,
            1534.88
        ],
        "text": " Нас интересует кое-что другое."
    },
    {
        "timestamp": [
            1536.04,
            1540.58
        ],
        "text": " Во-первых, здесь есть возможность работать с порядком."
    },
    {
        "timestamp": [
            1540.58,
            1546.3
        ],
        "text": " Опять же, эта возможность к нам, что называется, по наследованию пришла от флексов,"
    },
    {
        "timestamp": [
            1546.4,
            1553.58
        ],
        "text": " где есть свойство order, и мы можем конкретизировать, что окей, у нас будет меняться порядок."
    },
    {
        "timestamp": [
            1555.04,
            1561.54
        ],
        "text": " И если мы посмотрим на этот пример, у нас первый элемент, вот он на своем месте, он идет первый,"
    },
    {
        "timestamp": [
            1561.54,
            1564.54
        ],
        "text": " у него никаких дополнительных классов нет, кроме размера."
    },
    {
        "timestamp": [
            1565.46,
            1571.1
        ],
        "text": " Второй элемент, он говорит, что он второй второй в доме но с большим порядком мы его видим здесь последним за"
    },
    {
        "timestamp": [
            1571.1,
            1575.82
        ],
        "text": " счет того что у него большой порядок порядок просто за счет вот этой цифрыки задум хотя это"
    },
    {
        "timestamp": [
            1575.82,
            1587.62
        ],
        "text": " некий класс который мы сюда повесили без каких-либо дополнительных css элементов и соответственно этот элемент нас по центру хотя по дому идет в серединке за счет того"
    },
    {
        "timestamp": [
            1587.62,
            1594.76
        ],
        "text": " что у него ниже ордер и с этим как можно работать с этим можно работать добавляем опять же суффиксы"
    },
    {
        "timestamp": [
            1594.76,
            1606.66
        ],
        "text": " то есть мы можем сказать ему что при определенном размере ордер будет один или другой вот у нас этот пример есть но давайте попробуем его также потестить и"
    },
    {
        "timestamp": [
            1606.66,
            1632.5
        ],
        "text": " так но мы конкретизируем что начиная с размера скажем LG, у нас изменится порядок."
    },
    {
        "timestamp": [
            1633.64,
            1635.6
        ],
        "text": " И что мы видим?"
    },
    {
        "timestamp": [
            1636.82,
            1637.02
        ],
        "text": " Первый, второй, третий."
    },
    {
        "timestamp": [
            1638.12,
            1638.8
        ],
        "text": " First, second, third."
    },
    {
        "timestamp": [
            1639.56,
            1639.66
        ],
        "text": " Идем, идем, идем."
    },
    {
        "timestamp": [
            1642.68,
            1643.48
        ],
        "text": " Доходим до большого размера, и у нас порядок изменился."
    },
    {
        "timestamp": [
            1648.1,
            1654.22
        ],
        "text": " Первый, first, потом трст потом 3 а потом уже второй и ну понятное дело что опять же примерные игры у нас здесь они порядок менять на самом деле не имело"
    },
    {
        "timestamp": [
            1654.22,
            1671.58
        ],
        "text": " смысла но если мы сделаем немножко по-другому если мы скажем что у нас допуст, на самом маленьком размере они выстроятся во всю ширину."
    },
    {
        "timestamp": [
            1675.58,
            1747.08
        ],
        "text": " Именно на самом маленьком размере колонки. При этом порядок у нас будет естественным столе md1 и md1 так как индекс одинаковые они должны быть на своих местах давайте смотреть и так большой размер 1 2 3 и они у нас md то есть md4 соответственно 3 в ряд идем дальше размер ниже чем md они все перестро 12, соответственно, занимают ровно одну ячейку."
    },
    {
        "timestamp": [
            1748.0,
            1748.6
        ],
        "text": " Порядок."
    },
    {
        "timestamp": [
            1750.3,
            1754.66
        ],
        "text": " Порядок не изменился, потому что XS префикс мы не можем использовать."
    },
    {
        "timestamp": [
            1754.76,
            1757.28
        ],
        "text": " Давайте используем префикс S."
    },
    {
        "timestamp": [
            1757.52,
            1759.26
        ],
        "text": " Наверное, вообще без префикса тогда."
    },
    {
        "timestamp": [
            1763.12,
            1765.06
        ],
        "text": " И да, первый, третий, второй."
    },
    {
        "timestamp": [
            1765.78,
            1768.94
        ],
        "text": " Первый, третий, второй. Начиная с размера MD."
    },
    {
        "timestamp": [
            1769.54,
            1770.64
        ],
        "text": " Первый, второй, третий."
    },
    {
        "timestamp": [
            1772.08,
            1775.06
        ],
        "text": " В принципе, вариантов использования здесь уже можно придумать самостоятельно."
    },
    {
        "timestamp": [
            1775.18,
            1778.44
        ],
        "text": " Текст, картинка. На маленьком экране они переезжают."
    },
    {
        "timestamp": [
            1778.76,
            1780.08
        ],
        "text": " Картинка наверх, текст вниз."
    },
    {
        "timestamp": [
            1780.08,
            1783.78
        ],
        "text": " И, соответственно, мы можем подобным образом порядок менять."
    },
    {
        "timestamp": [
            1787.26,
            1792.0
        ],
        "text": " Ну и отступы например не будем смотреть только вот на том что здесь у нас по иллюстрации есть у нас есть два блока в первом"
    },
    {
        "timestamp": [
            1792.0,
            1797.34
        ],
        "text": " ряду и между ними есть расстояние за счет того что у второго элемента который как раз с этим"
    },
    {
        "timestamp": [
            1797.34,
            1805.26
        ],
        "text": " расстоянием добавлен некий offset начинается размеры md в 4 колонки. То же самое здесь. Отступ здесь, отступ здесь."
    },
    {
        "timestamp": [
            1806.04,
            1806.8
        ],
        "text": " И вот он прописан."
    },
    {
        "timestamp": [
            1806.92,
            1809.3
        ],
        "text": " Отступ 3 колонки, отступ 3 колонки."
    },
    {
        "timestamp": [
            1809.68,
            1811.04
        ],
        "text": " В сумме мы все равно получаем 12."
    },
    {
        "timestamp": [
            1811.16,
            1812.22
        ],
        "text": " 3, 3, 3, 3."
    },
    {
        "timestamp": [
            1812.86,
            1813.72
        ],
        "text": " Ну и последний вариант."
    },
    {
        "timestamp": [
            1814.4,
            1818.74
        ],
        "text": " Соответственно, сама ширину 6, отступ 3 с краешку."
    },
    {
        "timestamp": [
            1819.16,
            1820.78
        ],
        "text": " Это пространство просто пустым осталось."
    },
    {
        "timestamp": [
            1821.32,
            1823.24
        ],
        "text": " Здесь уже дополнительно, но все это не нужно регулировать."
    },
    {
        "timestamp": [
            1823.62,
            1825.46
        ],
        "text": " Это отступ, если он требуется"
    },
    {
        "timestamp": [
            1825.46,
            1831.38
        ],
        "text": " ну и последнее что мы посмотрим ну кроме того что скажем что все таки вложенность у нас может быть"
    },
    {
        "timestamp": [
            1831.38,
            1839.02
        ],
        "text": " из вложенности мы можем уже тоже различным образом все это дело использовать как нам нужно сколько раз"
    },
    {
        "timestamp": [
            1839.02,
            1845.18
        ],
        "text": " сколько нам это нужно мы посмотрим третью вкладку утилит из форума я вот невозможность"
    },
    {
        "timestamp": [
            1845.18,
            1852.96
        ],
        "text": " первую очередь влиять на дисплей то есть мы принудительно можем менять дисплее у"
    },
    {
        "timestamp": [
            1852.96,
            1857.4
        ],
        "text": " каждого нашего блока нас здесь интересует первую очередь дисплей на мы можем говорить"
    },
    {
        "timestamp": [
            1857.4,
            1885.36
        ],
        "text": " что для определенных размеров у нас будет показан либо не показан тот или иной блок и вот раздел hiding elements скрыть на всех размерах просто добавить класс display но это можно допустим на событие повесить какой-нибудь но скрыть только на маленьких размерах ok скрываем но начиная с размера sm показать скрыть только на этом размере скрыть только на этом размере показать на этом только на этом размере, показать на этом размере."
    },
    {
        "timestamp": [
            1885.78,
            1888.26
        ],
        "text": " То есть мы с этим можем гибко работать."
    },
    {
        "timestamp": [
            1888.42,
            1893.48
        ],
        "text": " Скрывать и показывать, либо начиная с каких-то размеров, либо на каких-то конкретных размерах."
    },
    {
        "timestamp": [
            1893.82,
            1895.62
        ],
        "text": " Опять же, это для адаптива бывает нужно."
    },
    {
        "timestamp": [
            1895.94,
            1897.24
        ],
        "text": " Что-то скрыть, что-то показать."
    },
    {
        "timestamp": [
            1898.12,
            1901.82
        ],
        "text": " Что-то мы видим на большом экране, оно пропадает на маленьком, на маленьком."
    },
    {
        "timestamp": [
            1901.82,
            1907.62
        ],
        "text": " Что-то мы видим, не видим это на большое, если этот блок сложно каким-то образом перестроить."
    },
    {
        "timestamp": [
            1908.6,
            1911.42
        ],
        "text": " И давайте смотреть примеры."
    },
    {
        "timestamp": [
            1911.58,
            1915.0
        ],
        "text": " Examples. Начнем с вот этого примера."
    },
    {
        "timestamp": [
            1916.16,
            1919.56
        ],
        "text": " Здесь, в общем-то, просто вот с этой сеткой мы посмотрим, как она работает."
    },
    {
        "timestamp": [
            1920.42,
            1924.44
        ],
        "text": " Мы, в принципе, уже все необходимое по навыкам получили."
    },
    {
        "timestamp": [
            1925.18,
            1926.16
        ],
        "text": " Давайте откроем ее."
    },
    {
        "timestamp": [
            1927.34,
            1930.38
        ],
        "text": " У нас есть общий контейнер, ряд этого контейнера,"
    },
    {
        "timestamp": [
            1930.58,
            1933.74
        ],
        "text": " и внутри лежат элементы с классом call.md4."
    },
    {
        "timestamp": [
            1934.58,
            1938.86
        ],
        "text": " То есть мы предполагаем, что начиная с размера 768 пикселей,"
    },
    {
        "timestamp": [
            1938.86,
            1943.08
        ],
        "text": " они выстраиваются по 3 в ряд пикселей назад,"
    },
    {
        "timestamp": [
            1943.32,
            1952.84
        ],
        "text": " и они все выстраиваются в одну колонку. Они получились у нас адаптивными"
    },
    {
        "timestamp": [
            1952.84,
            1959.88
        ],
        "text": " просто за счет одного класса. Здесь нет конкретики, то есть все то же самое можно было бы конкретизировать,"
    },
    {
        "timestamp": [
            1959.88,
            1965.02
        ],
        "text": " что где-то они в 2, допустим, на размер меньше, можно было бы сделать, чтобы они были 2 в ряд."
    },
    {
        "timestamp": [
            1966.12,
            1968.5
        ],
        "text": " Здесь не конкретизировано, но так можно было бы сделать."
    },
    {
        "timestamp": [
            1969.86,
            1970.62
        ],
        "text": " Другой пример."
    },
    {
        "timestamp": [
            1971.9,
            1972.46
        ],
        "text": " Вот этот."
    },
    {
        "timestamp": [
            1975.52,
            1977.42
        ],
        "text": " И давайте смотреть по коду."
    },
    {
        "timestamp": [
            1978.48,
            1980.16
        ],
        "text": " Мы посмотрим вот эти элементы."
    },
    {
        "timestamp": [
            1982.02,
            1993.8
        ],
        "text": " Здесь у нас идет ряд он вложен где-то там в контейнер вот он родительский общий контейнер"
    },
    {
        "timestamp": [
            1993.8,
            2005.0
        ],
        "text": " вот он ряд и у нас в ряду два элемента call md6 то есть до размера md они у нас по два в ряд."
    },
    {
        "timestamp": [
            2006.78,
            2008.16
        ],
        "text": " Соответственно, ниже они друг подружка."
    },
    {
        "timestamp": [
            2009.14,
            2009.24
        ],
        "text": " Это мы только что видели."
    },
    {
        "timestamp": [
            2015.48,
            2018.92
        ],
        "text": " Но обратите внимание, что помимо вот этой магии, у них еще есть здесь возможность некого изображения. В данном случае оно как placeholder такой, то есть ничем не заполнено."
    },
    {
        "timestamp": [
            2019.32,
            2021.26
        ],
        "text": " Но возможность для вставки картинки есть."
    },
    {
        "timestamp": [
            2021.92,
            2024.08
        ],
        "text": " Ну, по сути, это ссылка, на которую мы могли бы..."
    },
    {
        "timestamp": [
            2024.08,
            2028.28
        ],
        "text": " А, нет, это не ссылка вот она и здесь у нас"
    },
    {
        "timestamp": [
            2028.28,
            2036.62
        ],
        "text": " идет размер call of там то есть по содержимому она может быть шире или уже при этом она display none"
    },
    {
        "timestamp": [
            2036.62,
            2050.96
        ],
        "text": " динам но начиная с размера lg она все-таки показывается поэтому когда мы доходим до 1000 до 992 пикселя у нас появляется картинка ниже"
    },
    {
        "timestamp": [
            2051.88,
            2053.88
        ],
        "text": " 992 пикселей она пропадает"
    },
    {
        "timestamp": [
            2056.8,
            2062.76
        ],
        "text": " здесь предполагается картинка сейчас это просто свг со шириной 200 пикселей если мы эту ширину поменяем"
    },
    {
        "timestamp": [
            2068.22,
            2074.58
        ],
        "text": " шириной 200 пикселей если мы эту ширину поменяем то и сам блок стал меньше потому что не кол авто стоит он под содержимым по содержимому работает возможно ему имело бы смысл также максимальную"
    },
    {
        "timestamp": [
            2074.58,
            2087.74
        ],
        "text": " ширину тоже задать кем-нибудь своим классом но это уже как вариант и ниже мы видим некий main, также с классом container."
    },
    {
        "timestamp": [
            2088.16,
            2092.22
        ],
        "text": " И внутри него также есть ряд, и в этом ряду лежат две сущности."
    },
    {
        "timestamp": [
            2092.32,
            2097.02
        ],
        "text": " Вот так вот рядом основное содержимое и содержимое поменьше."
    },
    {
        "timestamp": [
            2097.12,
            2101.44
        ],
        "text": " Опять же, здесь по размеру MD оно работает просто за счет одного класса."
    },
    {
        "timestamp": [
            2101.44,
            2109.66
        ],
        "text": " MD8 — 8 из 12 колонок, MD md88 с 12 колонок md44 из 12 колонок и если мы будем сужать то они"
    },
    {
        "timestamp": [
            2109.66,
            2115.42
        ],
        "text": " опять же перестроиться в определенный момент и будет просто друг подружкой не нехитрым образом"
    },
    {
        "timestamp": [
            2115.42,
            2118
        ],
        "text": " за счет использования большого количества классов мы получаем адаптив вообще не не написав ни одного медиазапроса. За это многие любят Bootstrap. Попробовать как минимум его на практике стоит, чтобы понять, как это работает, и при необходимости также использовать в проектах."
    }
]