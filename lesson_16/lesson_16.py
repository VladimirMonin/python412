"""
Урок 16
05.12.2024

Python функции: args, kwargs. Модули и файлы. Упаковка приложения. Урок: 16

1. Продвинутые аргументы функций:
    - *args для произвольного числа позиционных аргументов
    - **kwargs для произвольного числа именованных аргументов
    - Комбинирование разных типов аргументов

2. Модульность Python:
    - Конструкция if __name__ == '__main__'
    - Работа с несколькими модулями
    - Организация множественных точек входа
    - Импорты между модулями

3. Работа с файлами:
    - Чтение/запись текстовых файлов
    - Создание файла настроек
    - Форматы хранения настроек
    - Обработка ошибок при работе с файлами

4. Упаковка приложения:
    - Подготовка проекта к упаковке
    - Внешние конфигурационные файлы
    - Использование PyInstaller
    - Тестирование упакованного приложения

5. Практика:
    - Создание приложения с настройками
    - Разделение логики по модулям
    - Сохранение конфигурации
    - Финальная сборка в exe
"""


# **kwargs - произвольное число именованных аргументов

message_dict = {
    "name": "Вася",
    "message": "привет!",
}

def get_message(name, message):
    return f'Твоё имя:{name}\nСообщение для тебя:{message}!'

def get_message_2(**kwargs):
    name = kwargs.get('name')
    message = kwargs.get('message')

    message = f'Твоё имя:{name}\nСообщение для тебя:{message}!'
    return (message)

# print(get_message(name="Вася", message="привет!"))
# print(get_message(**message_dict))
# get_message_2(**message_dict)
print(get_message_2(name="Вася", message="привет!"))

# Функция со всеми типами аргументов
def get_message_3(name, message, age=18, *args, **kwargs):
    print(name)
    print(message)
    print(age)
    print(args)
    print(kwargs)
    

# Вызов
get_message_3('Вася', 'привет!', 16, 30, last_name='Иванов')

# pip install tabulate
from tabulate import tabulate

group = [
    ['Имя', 'Возраст', 'Рост'],
    ['Вася', 16, 180],
    ['Таня', 17, 165],
    ['Женя', 18, 175],
    ['Нина', 15, 160],
]

# Выводим на экран
print(tabulate(group, headers='firstrow', tablefmt='fancy_grid'))

#PRACTICE - функция для вывода таблицы
"""
Опишите функцию, которая будет принимать:
1. Аргументы:
    - data: list[list[str]] - список списков с данными
    - **params:
        - headers: list[str] - заголовки столбцов
        - tablefmt: str - стиль таблицы
2. Возвращает:
    - str - таблица в виде строки

Используйте внутри функции проверку на наличие ключей
headers и tablefmt в словаре params
если нет первого, укажите  headers='firstrow'
если нет второго, возьмите стиль 'grid'

Вызовите функцию с проверочным набором.

group = [
    ['Имя', 'Возраст', 'Рост'],
    ['Вася', 16, 180],
    ['Таня', 17, 165],
    ['Женя', 18, 175],
    ['Нина', 15, 160],
]

table_params = {
    'tablefmt': 'fancy_grid',
}
"""